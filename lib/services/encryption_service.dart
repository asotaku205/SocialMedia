import 'dart:convert';
import 'dart:math';
import 'dart:typed_data';
import 'package:crypto/crypto.dart';
import 'package:encrypt/encrypt.dart' as encrypt hide SecureRandom;
import 'package:pointycastle/export.dart';
import 'package:asn1lib/asn1lib.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'secure_storage_service.dart';

/// Custom exception khi private key kh√¥ng t√¨m th·∫•y
class PrivateKeyNotFoundException implements Exception {
  final String message;
  PrivateKeyNotFoundException(this.message);

  @override
  String toString() => message;
}

class EncryptionService {

  /// H√†m migrate key c≈© (custom) sang chu·∫©n PEM cho user hi·ªán t·∫°i
  /// G·ªçi h√†m n√†y m·ªôt l·∫ßn sau khi c·∫≠p nh·∫≠t code ƒë·ªÉ ƒë·∫£m b·∫£o user c≈© kh√¥ng b·ªã l·ªói m√£ h√≥a/gi·∫£i m√£
  static Future<void> migrateKeysIfNeeded() async {
    final userId = _auth.currentUser?.uid;
    if (userId == null) return;

    // ƒê·ªçc private key c≈©
    final privateKeyRaw = await _secureStorage.read(key: _getPrivateKeyKey(userId));
    final publicKeyRaw = await _secureStorage.read(key: _getPublicKeyKey(userId));
    if (privateKeyRaw == null || publicKeyRaw == null) return;

    // N·∫øu ƒë√£ l√† PEM th√¨ b·ªè qua
    if (privateKeyRaw.startsWith('-----BEGIN PRIVATE KEY-----') && publicKeyRaw.startsWith('-----BEGIN PUBLIC KEY-----')) {
      print('üîë Keys ƒë√£ ·ªü ƒë·ªãnh d·∫°ng PEM, kh√¥ng c·∫ßn migrate.');
      return;
    }

    // N·∫øu l√† custom format th√¨ migrate
    try {
      // Parse custom private key
      final parts = privateKeyRaw.split(':');
      if (parts.length < 6) {
        print('‚ùå Private key kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng custom, b·ªè qua migrate.');
        return;
      }
      final modulus = base64.decode(parts[1]);
      final exponent = base64.decode(parts[2]);
      final privateExponent = base64.decode(parts[3]);
      final p = base64.decode(parts[4]);
      final q = base64.decode(parts[5]);
      final modulusInt = _bytesToBigInt(modulus);
      final exponentInt = _bytesToBigInt(exponent);
      final privateExponentInt = _bytesToBigInt(privateExponent);
      final pInt = _bytesToBigInt(p);
      final qInt = _bytesToBigInt(q);
      final privKey = RSAPrivateKey(modulusInt, privateExponentInt, pInt, qInt);
      final pubKey = RSAPublicKey(modulusInt, exponentInt);

      // Encode l·∫°i sang PEM
      final privateKeyPem = _encodePrivateKeyToPem(privKey);
      final publicKeyPem = _encodePublicKeyToPem(pubKey);

      // Ghi ƒë√® l·∫°i v√†o storage
      await _secureStorage.write(key: _getPrivateKeyKey(userId), value: privateKeyPem);
      await _secureStorage.write(key: _getPublicKeyKey(userId), value: publicKeyPem);

      // Update Firestore n·∫øu c·∫ßn
      await _firestore.collection('users').doc(userId).update({'publicKey': publicKeyPem});

      print('‚úÖ ƒê√£ migrate key sang PEM cho user $userId');
    } catch (e) {
      print('‚ùå L·ªói migrate key: $e');
    }
  }

  static BigInt _bytesToBigInt(List<int> bytes) {
    var result = BigInt.zero;
    for (var byte in bytes) {
      result = (result << 8) | BigInt.from(byte);
    }
    return result;
  }
  static final _secureStorage = FlutterSecureStorage();
  static final _firestore = FirebaseFirestore.instance;
  static final _auth = FirebaseAuth.instance;

  // L∆∞u kh√≥a theo userId ƒë·ªÉ m·ªói user c√≥ kh√≥a ri√™ng
  static String _getPrivateKeyKey(String userId) => 'rsa_private_key_$userId';
  static String _getPublicKeyKey(String userId) => 'rsa_public_key_$userId';

  /// Kh·ªüi t·∫°o RSA key pair cho user
  ///
  /// Web: S·ª≠ d·ª•ng 1024-bit key (nhanh h∆°n nh∆∞ng ch·∫°y tr√™n UI thread - c√≥ th·ªÉ lag)
  /// Native: S·ª≠ d·ª•ng 2048-bit key trong isolate (an to√†n h∆°n, kh√¥ng block UI)
  ///
  /// Tr·∫£ v·ªÅ true n·∫øu c·∫ßn generate key m·ªõi (ƒë·ªÉ UI c√≥ th·ªÉ hi·ªÉn th·ªã loading)
  static Future<bool> needsKeyGeneration() async {
    final userId = _auth.currentUser?.uid;
    if (userId == null) return false;

    final existingPrivateKey = await SecureStorageService.read(
      key: _getPrivateKeyKey(userId),
    );
    return existingPrivateKey == null;
  }

  static Future<void> initializeKeys() async {
    try {
      final userId = _auth.currentUser?.uid;
      if (userId == null) {
        print('‚ùå No user logged in');
        return;
      }

      final existingPrivateKey = await SecureStorageService.read(
        key: _getPrivateKeyKey(userId),
      );
      if (existingPrivateKey != null) {
        print('‚úÖ Keys already exist for user $userId');
        // Verify the key format is valid
        try {
          _decodePrivateKeyFromPem(existingPrivateKey);
          print('‚úÖ Existing private key is valid');
          return;
        } catch (e) {
          print('‚ö†Ô∏è Existing private key is invalid: $e');
          print('Will regenerate new keys...');
          // Continue to generate new keys
        }
      }

      // Ki·ªÉm tra c√≥ backup tr√™n Firebase kh√¥ng
      print('üîç Checking for existing backup on Firebase...');
      final backupDoc = await _firestore
          .collection('key_backups')
          .doc(userId)
          .get();
      if (backupDoc.exists) {
        print('‚ö†Ô∏è Found backup on Firebase but no local keys!');
        print(
          'üí° User needs to restore keys manually from Settings > Backup Private Key',
        );
        // Kh√¥ng t·ª± ƒë·ªông restore v√¨ c·∫ßn password
        // User s·∫Ω ƒë∆∞·ª£c nh·∫Øc qua BackupReminderDialog
        return;
      }

      print('üîë Generating new RSA key pair for user $userId...');

      // Web kh√¥ng h·ªó tr·ª£ isolates, ph·∫£i ch·∫°y ƒë·ªìng b·ªô
      // Mobile/Desktop c√≥ th·ªÉ d√πng compute() ƒë·ªÉ ch·∫°y trong background
      final Map<String, String> keyPair;
      if (kIsWeb) {
        // Tr√™n Web: Ch·∫°y ƒë·ªìng b·ªô nh∆∞ng d√πng 1024-bit cho nhanh h∆°n (2-3 gi√¢y)
        print('üåê Running on Web - generating 1024-bit key pair...');
        // Th√™m delay nh·ªè ƒë·ªÉ UI c√≥ th·ªÉ render loading indicator
        await Future.delayed(Duration(milliseconds: 100));
        keyPair = _generateRSAKeyPair(keySize: 1024);
      } else {
        // Tr√™n Mobile/Desktop: Ch·∫°y trong isolate v·ªõi 2048-bit (5-10 gi√¢y)
        print(
          'üì± Running on native platform - generating 2048-bit key pair in isolate...',
        );
        keyPair = await compute(_generateRSAKeyPairIsolate, 2048);
      }

      // Verify generated keys before saving
      try {
        _decodePrivateKeyFromPem(keyPair['privateKey']!);
        _decodePublicKeyFromPem(keyPair['publicKey']!);
        print('‚úÖ Generated keys are valid');
      } catch (e) {
        print('‚ùå Generated keys are invalid: $e');
        throw Exception('Failed to generate valid encryption keys');
      }

      // L∆∞u kh√≥a theo userId
      await SecureStorageService.write(
        key: _getPrivateKeyKey(userId),
        value: keyPair['privateKey']!,
      );
      await SecureStorageService.write(
        key: _getPublicKeyKey(userId),
        value: keyPair['publicKey']!,
      );

      await _firestore.collection('users').doc(userId).update({
        'publicKey': keyPair['publicKey']!,
        'publicKeyUpdatedAt': FieldValue.serverTimestamp(),
      });
      print(
        '‚úÖ RSA key pair generated and saved successfully for user $userId!',
      );
    } catch (e) {
      print('‚ùå Error initializing keys: $e');
      rethrow;
    }
  }

  /// Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ encryption keys h·ª£p l·ªá ch∆∞a
  static Future<bool> hasValidKeys() async {
    try {
      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final privateKeyPem = await SecureStorageService.read(
        key: _getPrivateKeyKey(userId),
      );
      final publicKeyPem = await SecureStorageService.read(
        key: _getPublicKeyKey(userId),
      );

      if (privateKeyPem == null || publicKeyPem == null) {
        return false;
      }

      // Verify keys can be decoded
      _decodePrivateKeyFromPem(privateKeyPem);
      _decodePublicKeyFromPem(publicKeyPem);

      return true;
    } catch (e) {
      print('‚ùå Keys validation failed: $e');
      return false;
    }
  }

  // Top-level function ƒë·ªÉ ch·∫°y trong isolate (ch·ªâ d√πng cho native platforms)
  static Map<String, String> _generateRSAKeyPairIsolate(int keySize) {
    return _generateRSAKeyPair(keySize: keySize);
  }

  static Map<String, String> _generateRSAKeyPair({int keySize = 2048}) {
    final secureRandom = _getSecureRandom();
    final rsaKeyGenerator = RSAKeyGenerator()
      ..init(
        ParametersWithRandom(
          RSAKeyGeneratorParameters(BigInt.from(65537), keySize, 64),
          secureRandom,
        ),
      );

    final pair = rsaKeyGenerator.generateKeyPair();
    final publicKey = pair.publicKey as RSAPublicKey;
    final privateKey = pair.privateKey as RSAPrivateKey;

    return {
      'publicKey': _encodePublicKeyToPem(publicKey),
      'privateKey': _encodePrivateKeyToPem(privateKey),
    };
  }

  static String _encodePublicKeyToPem(RSAPublicKey publicKey) {
    final algorithmSeq = ASN1Sequence()
      ..add(ASN1ObjectIdentifier.fromName('rsaEncryption'))
      ..add(ASN1Null());
    final publicKeySeq = ASN1Sequence()
      ..add(ASN1Integer(publicKey.modulus!))
      ..add(ASN1Integer(publicKey.exponent!));
    final publicKeyBitString = ASN1BitString(Uint8List.fromList(publicKeySeq.encodedBytes));
    final topLevelSeq = ASN1Sequence()
      ..add(algorithmSeq)
      ..add(publicKeyBitString);
    final dataBase64 = base64.encode(topLevelSeq.encodedBytes);
    return '-----BEGIN PUBLIC KEY-----\n$dataBase64\n-----END PUBLIC KEY-----';
  }

  static String _encodePrivateKeyToPem(RSAPrivateKey privateKey) {
    final privateKeySeq = ASN1Sequence()
      ..add(ASN1Integer(BigInt.from(0)))
      ..add(ASN1Integer(privateKey.modulus!))
      ..add(ASN1Integer(privateKey.publicExponent!))
      ..add(ASN1Integer(privateKey.privateExponent!))
      ..add(ASN1Integer(privateKey.p!))
      ..add(ASN1Integer(privateKey.q!))
      ..add(ASN1Integer(privateKey.privateExponent! % (privateKey.p! - BigInt.one)))
      ..add(ASN1Integer(privateKey.privateExponent! % (privateKey.q! - BigInt.one)))
      ..add(ASN1Integer(privateKey.q!.modInverse(privateKey.p!)));
    final dataBase64 = base64.encode(privateKeySeq.encodedBytes);
    return '-----BEGIN PRIVATE KEY-----\n$dataBase64\n-----END PRIVATE KEY-----';
  }

  static RSAPublicKey _decodePublicKeyFromPem(String pem) {
  final lines = pem.split('\n');
  final base64Str = lines.sublist(1, lines.length - 1).join('');
  final asn1Parser = ASN1Parser(base64.decode(base64Str));
  final topLevelSeq = asn1Parser.nextObject() as ASN1Sequence;
  final publicKeyBitString = topLevelSeq.elements[1] as ASN1BitString;
  final publicKeyAsn = ASN1Parser(publicKeyBitString.valueBytes());
  final publicKeySeq = publicKeyAsn.nextObject() as ASN1Sequence;
  final modulus = (publicKeySeq.elements[0] as ASN1Integer).valueAsBigInteger;
  final exponent = (publicKeySeq.elements[1] as ASN1Integer).valueAsBigInteger;
  return RSAPublicKey(modulus, exponent);
  }

  static RSAPrivateKey _decodePrivateKeyFromPem(String pem) {
  final lines = pem.split('\n');
  final base64Str = lines.sublist(1, lines.length - 1).join('');
  final asn1Parser = ASN1Parser(base64.decode(base64Str));
  final seq = asn1Parser.nextObject() as ASN1Sequence;
  final modulus = (seq.elements[1] as ASN1Integer).valueAsBigInteger;
  // final publicExponent = (seq.elements[2] as ASN1Integer).valueAsBigInteger; // not used
  final privateExponent = (seq.elements[3] as ASN1Integer).valueAsBigInteger;
  final p = (seq.elements[4] as ASN1Integer).valueAsBigInteger;
  final q = (seq.elements[5] as ASN1Integer).valueAsBigInteger;
  return RSAPrivateKey(modulus, privateExponent, p, q);
  }


  static SecureRandom _getSecureRandom() {
    final secureRandom = FortunaRandom();
    final random = Random.secure();
    final seeds = List<int>.generate(32, (_) => random.nextInt(256));
    secureRandom.seed(KeyParameter(Uint8List.fromList(seeds)));
    return secureRandom;
  }

  static String generateSessionKey() {
    final random = Random.secure();
    final key = List<int>.generate(32, (_) => random.nextInt(256));
    return base64.encode(key);
  }

  static Future<String> getOrCreateSessionKey(
    String chatId,
    String otherUserId,
  ) async {
    try {
      print('üì± Getting or creating session key for chat: $chatId');
      final chatDoc = await _firestore.collection('chats').doc(chatId).get();

      if (chatDoc.exists) {
        final data = chatDoc.data();
        if (data != null && data.containsKey('sessionKeys')) {
          final sessionKeys = data['sessionKeys'] as Map<String, dynamic>;
          final userId = _auth.currentUser?.uid;

          if (userId != null && sessionKeys.containsKey(userId)) {
            print('üîì Found existing session key, decrypting...');
            try {
              return await _decryptSessionKey(sessionKeys[userId] as String);
            } catch (e) {
              print('‚ö†Ô∏è Failed to decrypt existing session key: $e');
              print(
                'This might be because private key is missing or corrupted',
              );
              print('Will try to regenerate session key if possible...');

              // N·∫øu kh√¥ng gi·∫£i m√£ ƒë∆∞·ª£c, th·ª≠ t·∫°o l·∫°i session key
              // Nh∆∞ng ch·ªâ n·∫øu ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ private key
              final privateKey = await SecureStorageService.read(
                key: _getPrivateKeyKey(userId),
              );
              if (privateKey == null) {
                print('‚ùå Cannot decrypt: Private key is missing');
                throw Exception(
                  'Cannot read messages: Your encryption key is missing. Please:\n'
                  '1. Go to Settings > Backup Private Key\n'
                  '2. Restore your key from backup\n'
                  'If you don\'t have a backup, you won\'t be able to read old messages.',
                );
              }
              // N·∫øu c√≥ private key nh∆∞ng v·∫´n l·ªói, c√≥ th·ªÉ do format key sai
              rethrow;
            }
          } else {
            print(
              '‚ö†Ô∏è Session key exists but not for current user - will create new one',
            );
          }
        }
      }

      print('üÜï Creating new session key...');
      final sessionKey = generateSessionKey();
      final currentUserId = _auth.currentUser?.uid;
      if (currentUserId == null) {
        throw Exception('User not logged in');
      }

      // ƒê·∫£m b·∫£o user hi·ªán t·∫°i c√≥ keys
      final currentUserPrivateKey = await SecureStorageService.read(
        key: _getPrivateKeyKey(currentUserId),
      );
      if (currentUserPrivateKey == null) {
        print('‚ö†Ô∏è Current user does not have private key, initializing...');
        await initializeKeys();
      }

      // L·∫•y public key c·ªßa ng∆∞·ªùi d√πng kh√°c
      final otherUserDoc = await _firestore
          .collection('users')
          .doc(otherUserId)
          .get();
      final otherUserPublicKey = otherUserDoc.data()?['publicKey'] as String?;

      // L·∫•y public key c·ªßa user hi·ªán t·∫°i
      final currentUserPublicKey = await SecureStorageService.read(
        key: _getPublicKeyKey(currentUserId),
      );

      if (otherUserPublicKey == null) {
        print('‚ùå Other user ($otherUserId) does not have a public key');
        throw Exception(
          'Recipient has not set up encryption keys yet. Please ask them to open the app first.',
        );
      }

      if (currentUserPublicKey == null) {
        print(
          '‚ùå Current user ($currentUserId) does not have a public key after initialization',
        );
        throw Exception(
          'Failed to initialize encryption keys. Please try again or contact support.',
        );
      }

      print('üîê Encrypting session key for both users...');
      final encryptedForCurrentUser = _encryptWithPublicKey(
        sessionKey,
        currentUserPublicKey,
      );
      final encryptedForOtherUser = _encryptWithPublicKey(
        sessionKey,
        otherUserPublicKey,
      );

      print('üíæ Saving encrypted session keys to Firestore...');
      await _firestore.collection('chats').doc(chatId).set({
        'sessionKeys': {
          currentUserId: encryptedForCurrentUser,
          otherUserId: encryptedForOtherUser,
        },
        'createdAt': FieldValue.serverTimestamp(),
        'participants': [currentUserId, otherUserId],
      }, SetOptions(merge: true));

      print('‚úÖ Session key created and saved successfully');
      return sessionKey;
    } catch (e) {
      print('‚ùå Error getting/creating session key: $e');
      print('Stack trace: ${StackTrace.current}');
      rethrow;
    }
  }

  static String _encryptWithPublicKey(String data, String publicKeyPem) {
    try {
      print('üîê Encrypting with public key...');
      final publicKey = _decodePublicKeyFromPem(publicKeyPem);
      final encrypter = encrypt.Encrypter(encrypt.RSA(publicKey: publicKey));
      final encrypted = encrypter.encrypt(data).base64;
      print('‚úÖ Data encrypted successfully');
      return encrypted;
    } catch (e) {
      print('‚ùå Error encrypting with public key: $e');
      print(
        'Public key format: ${publicKeyPem.substring(0, min(50, publicKeyPem.length))}...',
      );
      rethrow;
    }
  }

  static Future<String> _decryptSessionKey(String encryptedData) async {
    try {
      final currentUserId = _auth.currentUser?.uid;
      if (currentUserId == null) {
        throw Exception('User not logged in');
      }

      final privateKeyPem = await SecureStorageService.read(
        key: _getPrivateKeyKey(currentUserId),
      );
      if (privateKeyPem == null) {
        print('‚ùå Private key not found for user $currentUserId');

        // Ki·ªÉm tra xem c√≥ backup kh√¥ng
        final hasBackup = await _checkHasBackup();
        if (hasBackup) {
          print(
            'üí° Found backup on Firebase - User needs to restore their private key',
          );
          throw PrivateKeyNotFoundException(
            'Your encryption keys are missing. Please restore them from Settings > Security > Backup Private Key to read encrypted messages.',
          );
        } else {
          print('‚ö†Ô∏è No backup found - Keys may have been lost permanently');
          throw PrivateKeyNotFoundException(
            'Your encryption keys are missing and no backup was found. You may not be able to read old encrypted messages. New messages will work after app restart.',
          );
        }
      }

      print('üîë Decrypting session key for user $currentUserId...');
      final privateKey = _decodePrivateKeyFromPem(privateKeyPem);
      final encrypter = encrypt.Encrypter(encrypt.RSA(privateKey: privateKey));
      final decrypted = encrypter.decrypt64(encryptedData);
      print('‚úÖ Session key decrypted successfully');
      return decrypted;
    } catch (e) {
      if (e is PrivateKeyNotFoundException) {
        rethrow;
      }
      print('‚ùå Error decrypting session key: $e');
      rethrow;
    }
  }

  /// Ki·ªÉm tra xem user c√≥ backup tr√™n Firebase kh√¥ng
  static Future<bool> _checkHasBackup() async {
    try {
      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final backupDoc = await _firestore
          .collection('key_backups')
          .doc(userId)
          .get();
      return backupDoc.exists;
    } catch (e) {
      return false;
    }
  }

  static Map<String, String> encryptMessage(
    String plainText,
    String sessionKey,
  ) {
    try {
      final keyBytes = base64.decode(sessionKey);
      final key = encrypt.Key(Uint8List.fromList(keyBytes));
      final iv = encrypt.IV.fromSecureRandom(16);

      final encrypter = encrypt.Encrypter(
        encrypt.AES(key, mode: encrypt.AESMode.cbc),
      );
      final encrypted = encrypter.encrypt(plainText, iv: iv);

      final hmacKey = Hmac(sha256, keyBytes);
      final hmacData = hmacKey.convert(
        utf8.encode(encrypted.base64 + iv.base64),
      );

      return {
        'encryptedContent': encrypted.base64,
        'iv': iv.base64,
        'hmac': hmacData.toString(),
      };
    } catch (e) {
      print('Error encrypting message: $e');
      rethrow;
    }
  }

  static String decryptMessage(
    String encryptedContent,
    String ivString,
    String hmac,
    String sessionKey,
  ) {
    try {
      final keyBytes = base64.decode(sessionKey);
      final key = encrypt.Key(Uint8List.fromList(keyBytes));

      final hmacKey = Hmac(sha256, keyBytes);
      final expectedHmac = hmacKey.convert(
        utf8.encode(encryptedContent + ivString),
      );

      if (expectedHmac.toString() != hmac) {
        throw Exception('HMAC verification failed');
      }

      final iv = encrypt.IV.fromBase64(ivString);
      final encrypter = encrypt.Encrypter(
        encrypt.AES(key, mode: encrypt.AESMode.cbc),
      );
      final encrypted = encrypt.Encrypted.fromBase64(encryptedContent);
      return encrypter.decrypt(encrypted, iv: iv);
    } catch (e) {
      print('Error decrypting message: $e');
      rethrow;
    }
  }

  static String generateFingerprint(String content, String timestamp) {
    final combined = '$content:$timestamp';
    final bytes = utf8.encode(combined);
    return sha256.convert(bytes).toString();
  }

  /// X√ìA KH√ìA CH·ªà KHI C·∫¶N THI·∫æT (kh√¥ng n√™n x√≥a khi logout th√¥ng th∆∞·ªùng)
  /// Ch·ªâ x√≥a khi: reset account, x√≥a thi·∫øt b·ªã tin c·∫≠y, etc.
  static Future<void> clearKeys({String? userId}) async {
    // ƒê√£ v√¥ hi·ªáu h√≥a: Kh√¥ng bao gi·ªù x√≥a kh√≥a m√£ h√≥a ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n xem ƒë∆∞·ª£c tin nh·∫Øn c≈©
    // final targetUserId = userId ?? _auth.currentUser?.uid;
    // if (targetUserId == null) return;
    // print('WARNING: Clearing encryption keys for user $targetUserId');
    // await _secureStorage.delete(key: _getPrivateKeyKey(targetUserId));
    // await _secureStorage.delete(key: _getPublicKeyKey(targetUserId));
    return;
  }

  static Future<String?> getMyPublicKey() async {
    final userId = _auth.currentUser?.uid;
    if (userId == null) return null;
    return await SecureStorageService.read(key: _getPublicKeyKey(userId));
  }

  static Future<String?> getPublicKey(String userId) async {
    try {
      final userDoc = await _firestore.collection('users').doc(userId).get();
      return userDoc.data()?['publicKey'] as String?;
    } catch (e) {
      return null;
    }
  }

  /// Ki·ªÉm tra tr·∫°ng th√°i encryption keys c·ªßa user hi·ªán t·∫°i
  /// Tr·∫£ v·ªÅ Map v·ªõi c√°c th√¥ng tin:
  /// - hasPrivateKey: c√≥ private key trong local storage kh√¥ng
  /// - hasPublicKey: c√≥ public key trong local storage kh√¥ng
  /// - hasBackup: c√≥ backup tr√™n Firebase kh√¥ng
  /// - needsRestore: c·∫ßn restore key kh√¥ng (c√≥ backup nh∆∞ng kh√¥ng c√≥ local key)
  static Future<Map<String, bool>> checkKeysStatus() async {
    final userId = _auth.currentUser?.uid;
    if (userId == null) {
      return {
        'hasPrivateKey': false,
        'hasPublicKey': false,
        'hasBackup': false,
        'needsRestore': false,
      };
    }

    final privateKey = await SecureStorageService.read(
      key: _getPrivateKeyKey(userId),
    );
    final publicKey = await SecureStorageService.read(key: _getPublicKeyKey(userId));
    final hasBackup = await _checkHasBackup();

    return {
      'hasPrivateKey': privateKey != null,
      'hasPublicKey': publicKey != null,
      'hasBackup': hasBackup,
      'needsRestore': hasBackup && privateKey == null,
    };
  }
}
