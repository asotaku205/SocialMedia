import 'package:flutter/foundation.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// Service ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu an to√†n
/// - Tr√™n Mobile/Desktop: S·ª≠ d·ª•ng FlutterSecureStorage (Keychain/Keystore)
/// - Tr√™n Web: S·ª≠ d·ª•ng SharedPreferences (persistent) + FlutterSecureStorage (fallback)
class SecureStorageService {
  static final FlutterSecureStorage _secureStorage = FlutterSecureStorage(
    webOptions: WebOptions(
      dbName: 'social_media_secure_db',
      publicKey: 'social_media_public_key',
    ),
  );

  // Cache in-memory ƒë·ªÉ tr√°nh ƒë·ªçc nhi·ªÅu l·∫ßn (ƒë·∫∑c bi·ªát tr√™n Web)
  static final Map<String, String> _memoryCache = {};

  /// ƒê·ªçc d·ªØ li·ªáu
  static Future<String?> read({required String key}) async {
    try {
      // Ki·ªÉm tra memory cache tr∆∞·ªõc
      if (_memoryCache.containsKey(key)) {
        print('üì¶ Reading from memory cache: $key');
        return _memoryCache[key];
      }

      if (kIsWeb) {
        // Tr√™n Web: Th·ª≠ nhi·ªÅu ph∆∞∆°ng ph√°p
        // 1. Th·ª≠ ƒë·ªçc t·ª´ SharedPreferences (persistent h∆°n IndexedDB)
        try {
          final prefs = await SharedPreferences.getInstance();
          final value = prefs.getString(key);
          if (value != null && value.isNotEmpty) {
            print('‚úÖ Read from SharedPreferences: $key');
            _memoryCache[key] = value; // Cache v√†o memory
            return value;
          }
        } catch (e) {
          print('‚ö†Ô∏è SharedPreferences read failed: $e');
        }

        // 2. Fallback: Th·ª≠ ƒë·ªçc t·ª´ FlutterSecureStorage (IndexedDB)
        try {
          final value = await _secureStorage.read(key: key);
          if (value != null && value.isNotEmpty) {
            print('‚úÖ Read from SecureStorage (IndexedDB): $key');
            _memoryCache[key] = value; // Cache v√†o memory
            // Backup v√†o SharedPreferences
            try {
              final prefs = await SharedPreferences.getInstance();
              await prefs.setString(key, value);
            } catch (_) {}
            return value;
          }
        } catch (e) {
          print('‚ö†Ô∏è SecureStorage read failed: $e');
        }

        print('‚ùå Key not found in any Web storage: $key');
        return null;
      } else {
        // Tr√™n mobile/desktop: D√πng secure storage native
        final value = await _secureStorage.read(key: key);
        if (value != null) {
          _memoryCache[key] = value; // Cache v√†o memory
        }
        return value;
      }
    } catch (e) {
      print('‚ùå Error reading from secure storage: $e');
      return null;
    }
  }

  /// Ghi d·ªØ li·ªáu
  static Future<void> write({
    required String key,
    required String value,
  }) async {
    try {
      // L∆∞u v√†o memory cache ngay l·∫≠p t·ª©c
      _memoryCache[key] = value;

      if (kIsWeb) {
        // Tr√™n Web: L∆∞u v√†o C·∫¢ HAI n∆°i ƒë·ªÉ ƒë·∫£m b·∫£o persistence
        bool writeSuccess = false;

        // 1. L∆∞u v√†o SharedPreferences (∆∞u ti√™n - persistent nh·∫•t)
        try {
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString(key, value);
          print('‚úÖ Written to SharedPreferences: $key');
          writeSuccess = true;
        } catch (e) {
          print('‚ö†Ô∏è SharedPreferences write failed: $e');
        }

        // 2. L∆∞u v√†o FlutterSecureStorage (backup)
        try {
          await _secureStorage.write(key: key, value: value);
          print('‚úÖ Written to SecureStorage: $key');
          writeSuccess = true;
        } catch (e) {
          print('‚ö†Ô∏è SecureStorage write failed: $e');
        }

        if (!writeSuccess) {
          throw Exception('Failed to write to any Web storage');
        }
      } else {
        // Tr√™n mobile/desktop: D√πng secure storage native
        await _secureStorage.write(key: key, value: value);
      }
    } catch (e) {
      print('‚ùå Error writing to secure storage: $e');
      rethrow;
    }
  }

  /// X√≥a d·ªØ li·ªáu
  static Future<void> delete({required String key}) async {
    try {
      // X√≥a kh·ªèi memory cache
      _memoryCache.remove(key);

      if (kIsWeb) {
        // X√≥a kh·ªèi c·∫£ hai n∆°i tr√™n Web
        try {
          final prefs = await SharedPreferences.getInstance();
          await prefs.remove(key);
        } catch (_) {}
        
        try {
          await _secureStorage.delete(key: key);
        } catch (_) {}
      } else {
        await _secureStorage.delete(key: key);
      }
    } catch (e) {
      print('‚ùå Error deleting from secure storage: $e');
    }
  }

  /// X√≥a t·∫•t c·∫£ d·ªØ li·ªáu
  static Future<void> deleteAll() async {
    try {
      // X√≥a memory cache
      _memoryCache.clear();

      if (kIsWeb) {
        // X√≥a kh·ªèi c·∫£ hai n∆°i tr√™n Web
        try {
          final prefs = await SharedPreferences.getInstance();
          await prefs.clear();
        } catch (_) {}
        
        try {
          await _secureStorage.deleteAll();
        } catch (_) {}
      } else {
        await _secureStorage.deleteAll();
      }
    } catch (e) {
      print('‚ùå Error deleting all from secure storage: $e');
    }
  }

  /// Ki·ªÉm tra xem key c√≥ t·ªìn t·∫°i kh√¥ng
  static Future<bool> containsKey({required String key}) async {
    try {
      final value = await read(key: key);
      return value != null;
    } catch (e) {
      return false;
    }
  }

  /// üÜï Clear memory cache cho specific user (khi logout)
  /// ƒêi·ªÅu n√†y quan tr·ªçng khi c√≥ nhi·ªÅu accounts tr√™n c√πng thi·∫øt b·ªã
  static void clearMemoryCacheForUser(String userId) {
    final keysToRemove = <String>[];
    
    // T√¨m t·∫•t c·∫£ keys li√™n quan ƒë·∫øn userId
    for (final key in _memoryCache.keys) {
      if (key.contains(userId)) {
        keysToRemove.add(key);
      }
    }
    
    // X√≥a kh·ªèi cache
    for (final key in keysToRemove) {
      _memoryCache.remove(key);
      print('üóëÔ∏è Cleared memory cache for key: $key');
    }
    
    print('‚úÖ Cleared ${keysToRemove.length} cached items for user $userId');
  }

  /// üÜï Clear to√†n b·ªô memory cache (khi logout t·∫•t c·∫£)
  static void clearAllMemoryCache() {
    final count = _memoryCache.length;
    _memoryCache.clear();
    print('‚úÖ Cleared all memory cache ($count items)');
  }
}
