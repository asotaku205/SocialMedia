import 'dart:convert';
import 'dart:typed_data';
import 'package:crypto/crypto.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'encryption_service.dart';
import 'secure_storage_service.dart';

/// Service ƒë·ªÉ backup v√† restore Private Key
/// 
/// C√ÅCH HO·∫†T ƒê·ªòNG:
/// 1. M√£ h√≥a Private Key b·∫±ng password c·ªßa user
/// 2. L∆∞u Private Key ƒë√£ m√£ h√≥a l√™n Firebase
/// 3. Khi ƒë·ªïi thi·∫øt b·ªã, d√πng password ƒë·ªÉ gi·∫£i m√£ v√† restore
class KeyBackupService {
  static final _firestore = FirebaseFirestore.instance;
  static final _auth = FirebaseAuth.instance;

  /// Backup Private Key l√™n Firebase (m√£ h√≥a b·∫±ng password)
  /// 
  /// Flow:
  /// 1. User nh·∫≠p password (ho·∫∑c d√πng password ƒëƒÉng nh·∫≠p)
  /// 2. Derive encryption key t·ª´ password (PBKDF2)
  /// 3. M√£ h√≥a Private Key b·∫±ng AES
  /// 4. Upload l√™n Firebase
  static Future<void> backupPrivateKey(String password) async {
    try {
      final userId = _auth.currentUser?.uid;
      if (userId == null) throw Exception('User not logged in');

      print('üîê B·∫Øt ƒë·∫ßu backup Private Key...');

      // ƒê·∫£m b·∫£o user c√≥ keys tr∆∞·ªõc khi backup
      final hasKeys = await EncryptionService.hasValidKeys();
      if (!hasKeys) {
        print('‚ö†Ô∏è User ch∆∞a c√≥ keys, ƒëang kh·ªüi t·∫°o...');
        await EncryptionService.initializeKeys();
      }

      // L·∫•y Private Key t·ª´ local storage
      final privateKey = await SecureStorageService.read(
        key: 'rsa_private_key_$userId',
      );

      if (privateKey == null) {
        throw Exception('Private Key kh√¥ng t·ªìn t·∫°i sau khi kh·ªüi t·∫°o. Vui l√≤ng th·ª≠ l·∫°i.');
      }

      // T·∫°o encryption key t·ª´ password (PBKDF2)
      final salt = userId; // D√πng userId l√†m salt (unique cho m·ªói user)
      final derivedKey = _deriveKeyFromPassword(password, salt);

      // M√£ h√≥a Private Key b·∫±ng AES-256
      final encryptedPrivateKey = EncryptionService.encryptMessage(
        privateKey,
        derivedKey,
      );

      // T·∫°o checksum ƒë·ªÉ verify khi restore
      final checksum = _createChecksum(privateKey);

      // Upload l√™n Firebase
      await _firestore.collection('key_backups').doc(userId).set({
        'encryptedPrivateKey': encryptedPrivateKey['encryptedContent'],
        'iv': encryptedPrivateKey['iv'],
        'hmac': encryptedPrivateKey['hmac'],
        'checksum': checksum,
        'backupMethod': 'manual', // üÜï Ph√¢n bi·ªát v·ªõi auto-backup
        'backedUpAt': FieldValue.serverTimestamp(),
        'version': '1.0',
      });

      print('‚úÖ Backup Private Key th√†nh c√¥ng!');
    } catch (e) {
      print('‚ùå L·ªói backup Private Key: $e');
      rethrow;
    }
  }

  /// Restore Private Key t·ª´ Firebase (gi·∫£i m√£ b·∫±ng password)
  /// 
  /// Flow:
  /// 1. T·∫£i encrypted backup t·ª´ Firebase
  /// 2. User nh·∫≠p password
  /// 3. Derive decryption key t·ª´ password
  /// 4. Gi·∫£i m√£ Private Key
  /// 5. Verify checksum
  /// 6. L∆∞u v√†o local storage
  static Future<bool> restorePrivateKey(String password) async {
    try {
      final userId = _auth.currentUser?.uid;
      if (userId == null) throw Exception('User not logged in');

      print('üîÑ B·∫Øt ƒë·∫ßu restore Private Key...');

      // T·∫£i backup t·ª´ Firebase
      final backupDoc = await _firestore
          .collection('key_backups')
          .doc(userId)
          .get();

      if (!backupDoc.exists) {
        throw Exception('Kh√¥ng t√¨m th·∫•y backup');
      }

      final backupData = backupDoc.data()!;

      // Derive decryption key t·ª´ password
      final salt = userId;
      final derivedKey = _deriveKeyFromPassword(password, salt);

      // Gi·∫£i m√£ Private Key
      try {
        final decryptedPrivateKey = EncryptionService.decryptMessage(
          backupData['encryptedPrivateKey'],
          backupData['iv'],
          backupData['hmac'],
          derivedKey,
        );

        // Verify checksum
        final expectedChecksum = backupData['checksum'];
        final actualChecksum = _createChecksum(decryptedPrivateKey);

        if (expectedChecksum != actualChecksum) {
          throw Exception('Checksum kh√¥ng kh·ªõp - d·ªØ li·ªáu b·ªã h·ªèng');
        }

        // L∆∞u Private Key v√†o local storage
        await SecureStorageService.write(
          key: 'rsa_private_key_$userId',
          value: decryptedPrivateKey,
        );

        print('‚úÖ Restore Private Key th√†nh c√¥ng!');
        return true;
      } catch (e) {
        if (e.toString().contains('HMAC')) {
          throw Exception('M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
        }
        rethrow;
      }
    } catch (e) {
      print('‚ùå L·ªói restore Private Key: $e');
      rethrow;
    }
  }

  /// Ki·ªÉm tra c√≥ backup kh√¥ng
  static Future<bool> hasBackup() async {
    try {
      final userId = _auth.currentUser?.uid;
      if (userId == null) return false;

      final backupDoc = await _firestore
          .collection('key_backups')
          .doc(userId)
          .get();

      return backupDoc.exists;
    } catch (e) {
      return false;
    }
  }

  /// X√≥a backup (khi user mu·ªën)
  static Future<void> deleteBackup() async {
    try {
      final userId = _auth.currentUser?.uid;
      if (userId == null) throw Exception('User not logged in');

      await _firestore.collection('key_backups').doc(userId).delete();
      print('‚úÖ ƒê√£ x√≥a backup');
    } catch (e) {
      print('‚ùå L·ªói x√≥a backup: $e');
      rethrow;
    }
  }

  // ==================== HELPER METHODS ====================

  /// Derive encryption key t·ª´ password s·ª≠ d·ª•ng PBKDF2
  /// 
  /// PBKDF2 (Password-Based Key Derivation Function 2):
  /// - Ch·ªëng brute-force attack
  /// - T·∫°o key m·∫°nh t·ª´ password y·∫øu
  /// - Iterations: 10,000 l·∫ßn (khuy·∫øn ngh·ªã OWASP)
  static String _deriveKeyFromPassword(String password, String salt) {
    const iterations = 10000; // S·ªë l·∫ßn l·∫∑p (c√†ng nhi·ªÅu c√†ng ch·∫≠m nh∆∞ng an to√†n h∆°n)
    const keyLength = 32; // 256 bits

    var key = Uint8List.fromList(utf8.encode(password + salt));
    
    // L·∫∑p PBKDF2
    for (var i = 0; i < iterations; i++) {
      var hmacSha256 = Hmac(sha256, key);
      key = Uint8List.fromList(hmacSha256.convert(utf8.encode('$password$salt$i')).bytes);
    }

    // L·∫•y 32 bytes ƒë·∫ßu ti√™n v√† encode base64
    final derivedKey = key.sublist(0, keyLength);
    return base64.encode(derivedKey);
  }

  /// T·∫°o checksum ƒë·ªÉ verify t√≠nh to√†n v·∫πn
  static String _createChecksum(String data) {
    return sha256.convert(utf8.encode(data)).toString();
  }
}
